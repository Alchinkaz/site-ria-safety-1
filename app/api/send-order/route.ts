import { type NextRequest, NextResponse } from "next/server"
import { ordersService } from "@/lib/database"

const TELEGRAM_BOT_TOKEN = "7952298985:AAEZGX1iV4mR4_F32Vltb5d2hDxEhrG20tQ"
const TELEGRAM_CHAT_ID = "-1002496607719"

async function sendTelegramMessage(message: string) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        chat_id: TELEGRAM_CHAT_ID,
        text: message,
        parse_mode: "HTML",
      }),
    })

    if (!response.ok) {
      const errorData = await response.json()
      console.error("Telegram API error:", errorData)
      throw new Error(`Telegram API error: ${response.status}`)
    }

    return await response.json()
  } catch (error) {
    console.error("Error sending telegram message:", error)
    throw error
  }
}

function formatDateTime(date: Date): string {
  const day = date.getDate().toString().padStart(2, "0")
  const month = (date.getMonth() + 1).toString().padStart(2, "0")
  const year = date.getFullYear()
  const hours = date.getHours().toString().padStart(2, "0")
  const minutes = date.getMinutes().toString().padStart(2, "0")
  const seconds = date.getSeconds().toString().padStart(2, "0")

  return `${day}.${month}.${year}, ${hours}:${minutes}:${seconds}`
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { productName, productImage, productType, quantity, phone, messenger, city, customCity } = body

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if (!productName || !phone || !city) {
      return NextResponse.json({ error: "–ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã" }, { status: 400 })
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ–¥
    const finalCity = city === "–î—Ä—É–≥–æ–π" ? customCity : city

    if (!finalCity) {
      return NextResponse.json({ error: "–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω" }, { status: 400 })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    let contactInfo = `–¢–µ–ª–µ—Ñ–æ–Ω: ${phone}`
    if (messenger) {
      contactInfo += ` | ${messenger}`
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const order = await ordersService.create({
      productName,
      productImage: productImage || "",
      productType,
      quantity: quantity.toString(), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è –±–∞–∑—ã
      contact: contactInfo,
      city: finalCity,
    })

    if (!order) {
      return NextResponse.json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏" }, { status: 500 })
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const now = new Date()
    const formattedDateTime = formatDateTime(now)

    let telegramMessage = `üõí –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä!\n\n`
    telegramMessage += `üì¶ –¢–æ–≤–∞—Ä: ${productName}\n`
    telegramMessage += `üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${quantity} —à—Ç.\n`
    telegramMessage += `üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${contactInfo}\n`
    telegramMessage += `üèô –ì–æ—Ä–æ–¥: ${finalCity}\n`
    telegramMessage += `‚è∞ –í—Ä–µ–º—è: ${formattedDateTime}`

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
    try {
      await sendTelegramMessage(telegramMessage)
    } catch (telegramError) {
      console.error("Failed to send telegram message:", telegramError)
      // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –∑–∞—è–≤–∫–∞ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ
    }

    return NextResponse.json({
      success: true,
      message: "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",
      order: order,
    })
  } catch (error) {
    console.error("Error processing order:", error)
    return NextResponse.json({ error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }, { status: 500 })
  }
}
